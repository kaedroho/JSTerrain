import math


print "// THESE CONSTANTS ARE AUTOMATICALLY GENERATED"
print "// DO NOT EDIT THIS FILE DIRECTLY (CHANGES MAY GET ACCIDENTALLY WIPED)"
print ""
print ""
print "JSTerrain.chunkConstants = ["

class Chunk():
    def __init__(self, level, size, x, y, quad, border_edge_n, border_edge_e, border_edge_s, border_edge_w, variable_lod_edge_n, variable_lod_edge_e, variable_lod_edge_s, variable_lod_edge_w):
        self.level = level
        self.size = size
        self.x = x
        self.y = y
        self.minx = self.x * self.size
        self.miny = self.y * self.size
        self.maxx = self.minx + self.size
        self.maxy = self.miny + self.size
        self.quad = quad
        self.vb = 0
        if quad == 1 or quad == 2:
            self.vb = 1
        if quad == 3 or quad == 4:
            self.vb = 2
        #self.start_index = level * 16 * 16 * 6
        self.start_index = 0
        self.border_edge_n = border_edge_n
        self.border_edge_e = border_edge_e
        self.border_edge_s = border_edge_s
        self.border_edge_w = border_edge_w
        self.variable_lod_edge_n = variable_lod_edge_n
        self.variable_lod_edge_e = variable_lod_edge_e
        self.variable_lod_edge_s = variable_lod_edge_s
        self.variable_lod_edge_w = variable_lod_edge_w
        
    def get_border_edge_string(self):
        number = 0
        if self.border_edge_n:
            number = number + 1
        if self.border_edge_e:
            number = number + 2
        if self.border_edge_s:
            number = number + 4
        if self.border_edge_w:
            number = number + 8
        return str(number)
        
    def get_variable_lod_edge_string(self):
        number = 0
        if self.variable_lod_edge_n:
            number = number + 1
        if self.variable_lod_edge_e:
            number = number + 2
        if self.variable_lod_edge_s:
            number = number + 4
        if self.variable_lod_edge_w:
            number = number + 8
        return str(number)
        
    def to_string(self):
        return "".join(["{level: ", str(self.level), ", size: ", str(self.size), ", position: {x: ", str(self.x), ", y: ", str(self.y), "}, min: {x: ", str(self.minx), ", y: ", str(self.miny), "}, max: {x: ", str(self.maxx), ", y: ", str(self.maxy), "}, centre: {x: ", str(self.minx + self.size / 2), ", y: ", str(self.miny + self.size / 2), "}, quad: " + str(self.quad) + ", vb: " + str(self.vb) + ", startIndex: " + str(self.start_index) + ", borderEdges: ", self.get_border_edge_string(), ", variableLodEdges: ", self.get_variable_lod_edge_string(), "},"])
        
chunklist = []

for chunk in range(0, 1 + 4 + 16 + 64 + 256):
    chunklist.append(Chunk(0, 0, 0, 0, 0, False, False, False, False, False, False, False, False))
    
def recurse(chunk_id, level, size, x, y, quad, corner, border_n, border_e, border_s, border_w):
    if corner == -1:
        chunklist[chunk_id] = Chunk(level, size, x, y, quad, border_n, border_e, border_s, border_w, True, True, True, True)
    else:
        chunklist[chunk_id] = Chunk(level, size, x, y, quad, border_n, border_e, border_s, border_w, False, False, False, False)
        if corner == 0:
            chunklist[chunk_id].variable_lod_edge_n = True
            chunklist[chunk_id].variable_lod_edge_w = True
        elif corner == 1:
            chunklist[chunk_id].variable_lod_edge_n = True
            chunklist[chunk_id].variable_lod_edge_e = True
        elif corner == 2:
            chunklist[chunk_id].variable_lod_edge_s = True
            chunklist[chunk_id].variable_lod_edge_w = True
        elif corner == 3:
            chunklist[chunk_id].variable_lod_edge_s = True
            chunklist[chunk_id].variable_lod_edge_e = True
    if level != 0:
        recurse(chunk_id * 4 + 1, level - 1, size / 2, x * 2, y * 2, 1 if quad == 0 else quad, 0, border_n, False, False, border_w)
        recurse(chunk_id * 4 + 2, level - 1, size / 2, x * 2 + 1, y * 2, 2 if quad == 0 else quad, 1, border_n, border_e, False, False)
        recurse(chunk_id * 4 + 3, level - 1, size / 2, x * 2, y * 2 + 1, 3 if quad == 0 else quad, 2, False, False, border_s, border_w)
        recurse(chunk_id * 4 + 4, level - 1, size / 2, x * 2 + 1, y * 2 + 1, 4 if quad == 0 else quad, 3, False, border_e, border_s, False)
        
recurse(0, 4, 256, 0, 0, 0, -1, True, True, True, True)

start_index = 0
for chunk in chunklist:
    chunk.start_index = start_index
    start_index = start_index + 16 * 16 * 6
    print "".join(["\t", chunk.to_string()])
    
#for chunk in chunklist:
#    print "".join(["\t", chunk.to_string()])
    
print "];"
print ""
print ""
print "JSTerrain.LODSize = [16, 32, 64, 128, 256];"
print ""
print ""
print "JSTerrain.indices = new Uint16Array([",
current_index = 0
for chunk in chunklist:
    for x in range(0, 16):
        for y in range(0, 16):
            if chunk.level == 4:
                print "0, 0, 0, 0, 0, 0,",
            else:
                quadsize = chunk.size / 16
                px = x * quadsize + chunk.minx
                py = y * quadsize + chunk.miny
                
                if chunk.vb == 2:
                    py = py - 128
                    
                a = (py * 257) + px
                b = a + quadsize
                c = a + 257 * quadsize
                d = c + quadsize
                
#                a = chunk.miny * 257 + chunk.minx
#                b = a + chunk.size
#                c = a + 257 * chunk.size
#                d = c + chunk.size
                
                print str(a) + ",",
                print str(b) + ",",
                print str(c) + ",",
                print str(c) + ",",
                print str(b) + ",",
                print str(d) + ",",
            current_index = current_index + 6
print "]);"
